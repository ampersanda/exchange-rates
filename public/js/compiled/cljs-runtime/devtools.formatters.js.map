{"version":3,"file":"devtools.formatters.js","sources":["devtools/formatters.cljs"],"mappings":"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","names":["formatter","devtools.formatters/present?","define!","devtools.formatters.core/header-api-call","devtools.formatters/install-our-formatter!","devtools.formatters/*installed*","devtools.formatters/CLJSDevtoolsFormatter","devtools.formatters/find-fn-in-debug-ns","fn-name","cljs.core/boolean","cljs.core/some","devtools.formatters/is-ours?","formatters","api-call","name","fn","temp__5455__auto__","monitor-api-call","monitor","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","devtools.formatters/monitor-api-calls","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","args","devtools.formatters/installed?","devtools.util/set-formatters-safe!","wrap","and__3938__auto__","goog.labs.userAgent.browser/isChrome","goog.labs.userAgent.browser/isVersionOrHigher","devtools.formatters.log_exception_if_avail.cljs$core$IFn$_invoke$arity$variadic","e","devtools.util/get-formatters-safe","e15203","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","devtools.formatters/log-exception-if-avail","seq15207","self__4519__auto__","cljs.core/seq","log-exception","devtools.formatters/monitor-api-call-if-avail","devtools.formatters/install!","sanitizer","devtools.formatters/sanitize","devtools.formatters/available?","devtools.context/get-root","devtools.formatters/uninstall-our-formatters!","devtools.formatters.core/body-api-call","this__4192__auto__","writer__4193__auto__","opt__4194__auto__","cljs.core/-write","devtools.formatters/->CLJSDevtoolsFormatter","_","e15214","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","new-formatters","devtools.formatters/uninstall!","fexpr__15218","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","o","devtools.formatters/obsolete-formatter-key","devtools.formatters/*monitor-enabled*","new-formatters-js","cljs.core/empty?","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","or__3949__auto__","devtools.util/in-node-context?","devtools.formatters/*sanitizer-enabled*","devtools.formatters/build-cljs-formatter","devtools.prefs/pref","devtools.formatters.core/has-body-api-call"],"sourcesContent":["(ns devtools.formatters\n  (:require [goog.labs.userAgent.browser :as ua]\n            [devtools.prefs :as prefs]\n            [devtools.util :refer [get-formatters-safe set-formatters-safe! in-node-context?]]\n            [devtools.context :as context]\n            [devtools.formatters.core :refer [header-api-call has-body-api-call body-api-call]]))\n\n(def ^:dynamic *installed* false)\n(def ^:dynamic *sanitizer-enabled* true)\n(def ^:dynamic *monitor-enabled* false)\n\n(def obsolete-formatter-key \"devtoolsFormatter\")\n\n(defn ^:dynamic available? []\n  (or (in-node-context?)                                                                                                      ; node.js or Chrome 47+\n      (and (ua/isChrome) (ua/isVersionOrHigher 47))))\n\n(deftype CLJSDevtoolsFormatter [])\n\n; devtools.debug namespace may not be present => no debugging\n(defn- find-fn-in-debug-ns [fn-name]\n  (try\n    (aget (context/get-root) \"devtools\" \"debug\" fn-name)\n    (catch :default _\n      nil)))\n\n(defn- monitor-api-call-if-avail [name api-call args]\n  (if-let [monitor-api-call (find-fn-in-debug-ns \"monitor_api_call\")]\n    (monitor-api-call name api-call args)\n    (apply api-call args)))\n\n(defn- log-exception-if-avail [& args]\n  (if-let [log-exception (find-fn-in-debug-ns \"log_exception\")]\n    (apply log-exception args)))\n\n; monitors api calls in a separate debug console if debug namespace is available\n(defn- monitor-api-calls [name api-call]\n  (fn [& args]\n    (if-not *monitor-enabled*\n      (apply api-call args)\n      (monitor-api-call-if-avail name api-call args))))\n\n; wraps our api calls in a try-catch block to prevent leaking of exceptions in case something went wrong\n(defn- sanitize [name api-call]\n  (fn [& args]\n    (if-not *sanitizer-enabled*\n      (apply api-call args)                                                                                                   ; raw API call\n      (try\n        (apply api-call args)                                                                                                 ; wrapped API call\n        (catch :default e\n          (log-exception-if-avail (str name \": \" e))\n          nil)))))\n\n(defn- build-cljs-formatter []\n  (let [wrap (fn [name api-call]\n               (let [monitor (partial monitor-api-calls name)\n                     sanitizer (partial sanitize name)]\n                 ((comp monitor sanitizer) api-call)\n                 api-call))\n        formatter (CLJSDevtoolsFormatter.)\n        define! (fn [name fn]\n                  (aset formatter name (wrap name fn)))]\n    (define! \"header\" header-api-call)\n    (define! \"hasBody\" has-body-api-call)\n    (define! \"body\" body-api-call)\n    formatter))\n\n(defn- is-ours? [o]\n  (instance? CLJSDevtoolsFormatter o))\n\n(defn- present? []\n  (let [formatters (get-formatters-safe)]\n    (boolean (some is-ours? formatters))))\n\n(defn- install-our-formatter! [formatter]\n  (let [formatters (.slice (get-formatters-safe))]                                                                            ; slice effectively duplicates the array\n    (.push formatters formatter)                                                                                              ; acting on duplicated array\n    (set-formatters-safe! formatters)\n    (if (prefs/pref :legacy-formatter)\n      (aset (context/get-root) obsolete-formatter-key formatter))))\n\n(defn- uninstall-our-formatters! []\n  (let [new-formatters (remove is-ours? (vec (get-formatters-safe)))\n        new-formatters-js (if (empty? new-formatters) nil (into-array new-formatters))]\n    (set-formatters-safe! new-formatters-js)))\n\n; -- installation -----------------------------------------------------------------------------------------------------------\n\n(defn installed? []\n  *installed*)\n\n(defn install! []\n  (when-not *installed*\n    (set! *installed* true)\n    (install-our-formatter! (build-cljs-formatter))\n    true))\n\n(defn uninstall! []\n  (when *installed*\n    (set! *installed* false)\n    (uninstall-our-formatters!)))\n"]}