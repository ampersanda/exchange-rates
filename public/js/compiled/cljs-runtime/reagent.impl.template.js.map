{"version":3,"file":"reagent.impl.template.js","sources":["reagent/impl/template.cljs"],"mappings":"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","names":["reagent/debug.has-console","reagent/debug.tracking","reagent/debug.track-console","js/console","reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic","x","first-child","first","hasprops","reagent.impl.template/NativeWrapper","tag","a","i","reagent.impl.template/as-element","val","v","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","reagent.impl.template/get-key","reagent.impl.template/js-val?","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","args","G__22337","jsprops","reagent.impl.template/convert-prop-value","G__22324","o","new-cursor-offset","cljs.core/count","rendered-value","this","e","reagent.impl.template/expand-seq","s","cljs.core/with-meta","cljs.core/meta","argv","k","reagent.impl.template/input-component-set-value","js/reagent","js/reagent.impl","js/reagent.impl.template","js/reagent.impl.template.find-dom-node","reagent.impl.template/find-dom-node","on-change","synthetic-input","reagent.impl.template/native-element","reagent.impl.template/cached-parse","n","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","synthetic-on-change","reagent.impl.template/kv-conv","temp__5459__auto__","class","id-class","js/module$node_modules$react$index.createElement","reagent.impl.template/input-unmount","props","cljs.core/map?","res","synthetic-on-update","G__22320","wrapped","reagent.impl.template/named?","comp","parsed","cljs.core/ifn?","reagent.impl.template/convert-props","cljs.core/Symbol","on-write","pos","goog/typeOf","reagent.impl.template/reagent-synthetic-input-class","derefed","reagent.ratom/check-derefs","reagent.impl.template/expand-seq-dev","ctx","existing-offset-from-end","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","reagent.impl.template/hiccup-err","seq22360","G__22361","cljs.core/first","cljs.core/next","self__4518__auto__","msg","p","reagent.impl.template/oset","old","reagent.impl.template/cached-prop-name","reagent.impl.template/cache-get","reagent.impl.template/tag-name-cache","reagent.impl.template/oget","reagent.impl.template/reagent-input-class","reagent.impl.template/reagent-synthetic-input","input-type","reagent.impl.template.input_render_setup.cljs$core$IFn$_invoke$arity$3","reagent.impl.component/create-class","reagent.impl.template/input-spec","reagent.impl.template/re-tag","k'","reagent.impl.template/prop-name-cache","cljs.core/name","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","node-value","dom-value","reagent.impl.component/comp-name","js/Error","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","c","reagent.impl.template/str-coll","cljs.core/str","reagent.impl.template/hiccup-tag?","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","G__22365","reagent.impl.template/make-element","key","reagent.impl.template/input-node-set-value","node","on-update","cljs.core/fn?","cljs.core/vector?","reagent.impl.template/vec-to-elem","temp__5461__auto__","reagent.impl.template/key-from-vec","G__22352","reagent.impl.template/try-get-key","or__3949__auto__","reagent.impl.template/input-component?","G__22348","reagent.impl.template/adapt-react-class","p__22349","map__22350","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","clojure.walk/prewalk","reagent.impl.template/parse-tag","value","reagent.impl.batching/do-after-render","reagent.impl.component/as-element","reagent.impl.template/has-selection-api?","coll","reagent.impl.template/valid-tag?","reagent.impl.template/reag-element","reagent.impl.template/reagent-input","p__22325","map__22326","reagent.impl.template/stringify-class","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","hiccup-tag","and__3938__auto__","reagent.impl.template/synthetic-input-spec","p1__22331#","reagent.impl.template/input-handle-change","reagent.impl.util/dash-to-camel","component","vec__22376","G__22354","G__22339","reagent.impl.template.adapt_react_class.cljs$core$IFn$_invoke$arity$2","this__4192__auto__","writer__4193__auto__","opt__4194__auto__","cljs.core/-write","reagent.impl.template/->NativeWrapper","clojure.string/replace","reagent.impl.util/fun-name","G__22379","G__22357","cljs.core/Keyword","G__22358","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","reagent.impl.component/as-class","id","cljs.core/reduce-kv","clojure.string.join.cljs$core$IFn$_invoke$arity$2","vec__22341","cljs.core/re-matches","G__22355","cljs.core/coll?","cljs.core/clj->js","reagent.impl.template/these-inputs-have-selection-api","reagent.impl.component/*current-component*","e22344","reagent.impl.template.input_render_setup.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/expand-seq-check","G__22353","cljs.core/contains?","js/document","cljs.core/seq?","p__22328","map__22329","G__22333","reagent.impl.template/input-render-setup","p__22334","map__22335","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","G__22380","G__22381","G__22382","reagent.impl.template/set-id-class","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","n__4408__auto__"],"sourcesContent":["(ns reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [clojure.walk :refer [prewalk]]\n            [reagent.impl.util :as util :refer [is-client]]\n            [reagent.impl.component :as comp]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.debug :refer-macros [dbg prn println log dev?\n                                          warn warn-unless]]))\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [])\n\n\n;;; Common utilities\n\n(defn ^boolean named? [x]\n  (or (keyword? x)\n      (symbol? x)))\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n\n;;; Props conversion\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (aget o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (aset prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn ^boolean js-val? [x]\n  (not (identical? \"object\" (goog/typeOf x))))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (aset (cached-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn oset [o k v]\n  (doto (if (nil? o) #js{} o)\n    (aset k v)))\n\n(defn oget [o k]\n  (if (nil? o) nil (aget o k)))\n\n(defn set-id-class [p id-class]\n  (let [id ($ id-class :id)\n        p (if (and (some? id)\n                   (nil? (oget p \"id\")))\n            (oset p \"id\" id)\n            p)]\n    (if-some [class ($ id-class :className)]\n      (let [old (oget p \"className\")]\n        (oset p \"className\" (if (nil? old)\n                              class\n                              (str class \" \" old))))\n      p)))\n\n(defn stringify-class [{:keys [class] :as props}]\n  (if (coll? class)\n    (->> class\n         (filter identity)\n         (string/join \" \")\n         (assoc props :class))\n    props))\n\n(defn convert-props [props id-class]\n  (-> props\n      stringify-class\n      convert-prop-value\n      (set-id-class id-class)))\n\n;;; Specialization for input components\n\n;; This gets set from reagent.dom\n(defonce find-dom-node nil)\n\n;; <input type=\"??\" >\n;; The properites 'selectionStart' and 'selectionEnd' only exist on some inputs\n;; See: https://html.spec.whatwg.org/multipage/forms.html#do-not-apply\n(def these-inputs-have-selection-api #{\"text\" \"textarea\" \"password\" \"search\"\n                                       \"tel\" \"url\"})\n\n(defn ^boolean has-selection-api?\n  [input-type]\n  (contains? these-inputs-have-selection-api input-type))\n\n(declare input-component-set-value)\n\n(defn input-node-set-value\n  [node rendered-value dom-value component {:keys [on-write]}]\n  (if-not (and (identical? node ($ js/document :activeElement))\n            (has-selection-api? ($ node :type))\n            (string? rendered-value)\n            (string? dom-value))\n    ;; just set the value, no need to worry about a cursor\n    (do\n      ($! component :cljsDOMValue rendered-value)\n      ($! node :value rendered-value)\n      (when (fn? on-write)\n        (on-write rendered-value)))\n    \n    ;; Setting \"value\" (below) moves the cursor position to the\n    ;; end which gives the user a jarring experience.\n    ;;\n    ;; But repositioning the cursor within the text, turns out to\n    ;; be quite a challenge because changes in the text can be\n    ;; triggered by various events like:\n    ;; - a validation function rejecting a user inputted char\n    ;; - the user enters a lower case char, but is transformed to\n    ;;   upper.\n    ;; - the user selects multiple chars and deletes text\n    ;; - the user pastes in multiple chars, and some of them are\n    ;;   rejected by a validator.\n    ;; - the user selects multiple chars and then types in a\n    ;;   single new char to repalce them all.\n    ;; Coming up with a sane cursor repositioning strategy hasn't\n    ;; been easy ALTHOUGH in the end, it kinda fell out nicely,\n    ;; and it appears to sanely handle all the cases we could\n    ;; think of.\n    ;; So this is just a warning. The code below is simple\n    ;; enough, but if you are tempted to change it, be aware of\n    ;; all the scenarios you have handle.\n    (let [node-value ($ node :value)]\n      (if (not= node-value dom-value)\n        ;; IE has not notified us of the change yet, so check again later\n        (batch/do-after-render #(input-component-set-value component))\n        (let [existing-offset-from-end (- (count node-value)\n                                         ($ node :selectionStart))\n              new-cursor-offset        (- (count rendered-value)\n                                         existing-offset-from-end)]\n          ($! component :cljsDOMValue rendered-value)\n          ($! node :value rendered-value)\n          (when (fn? on-write)\n            (on-write rendered-value))\n          ($! node :selectionStart new-cursor-offset)\n          ($! node :selectionEnd new-cursor-offset))))))\n\n(defn input-component-set-value [this]\n  (when ($ this :cljsInputLive)\n    ($! this :cljsInputDirty false)\n    (let [rendered-value ($ this :cljsRenderedValue)\n          dom-value ($ this :cljsDOMValue)\n          node (find-dom-node this) ;; Default to the root node within this component\n          synthetic-on-update ($ this :cljsSyntheticOnUpdate)]\n      (when (not= rendered-value dom-value)\n        (if (fn? synthetic-on-update)\n          (synthetic-on-update input-node-set-value node rendered-value dom-value this)\n          (input-node-set-value node rendered-value dom-value this {}))))))\n\n(defn input-handle-change [this on-change e]\n  ($! this :cljsDOMValue (-> e .-target .-value))\n  ;; Make sure the input is re-rendered, in case on-change\n  ;; wants to keep the value unchanged\n  (when-not ($ this :cljsInputDirty)\n    ($! this :cljsInputDirty true)\n    (batch/do-after-render #(input-component-set-value this)))\n  (on-change e))\n\n(defn input-render-setup\n  ([this jsprops {:keys [synthetic-on-update synthetic-on-change]}]\n   ;; Don't rely on React for updating \"controlled inputs\", since it\n   ;; doesn't play well with async rendering (misses keystrokes).\n   (when (and (some? jsprops)\n           (.hasOwnProperty jsprops \"onChange\")\n           (.hasOwnProperty jsprops \"value\"))\n     (assert find-dom-node\n       \"reagent.dom needs to be loaded for controlled input to work\")\n     (when synthetic-on-update\n       ;; Pass along any synthetic input setter given\n       ($! this :cljsSyntheticOnUpdate synthetic-on-update))\n     (let [v ($ jsprops :value)\n           value (if (nil? v) \"\" v)\n           on-change ($ jsprops :onChange)\n           on-change (if synthetic-on-change\n                       (partial synthetic-on-change on-change)\n                       on-change)]\n       (when-not ($ this :cljsInputLive)\n         ;; set initial value\n         ($! this :cljsInputLive true)\n         ($! this :cljsDOMValue value))\n       ($! this :cljsRenderedValue value)\n       (js-delete jsprops \"value\")\n       (doto jsprops\n         ($! :defaultValue value)\n         ($! :onChange #(input-handle-change this on-change %))))))\n  ([this jsprops]\n   (input-render-setup this jsprops {})))\n\n(defn input-unmount [this]\n  ($! this :cljsInputLive nil))\n\n(defn ^boolean input-component? [x]\n  (case x\n    (\"input\" \"textarea\") true\n    false))\n\n(def reagent-input-class nil)\n\n(def reagent-synthetic-input-class nil)\n\n(declare make-element)\n\n(def input-spec\n  {:display-name \"ReagentInput\"\n   :component-did-update input-component-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [argv comp jsprops first-child]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops)\n       (make-element argv comp jsprops first-child)))})\n\n(def synthetic-input-spec\n  ;; Same as `input-spec` except it takes another argument for `input-setter`\n  {:display-name \"ReagentSyntheticInput\"\n   :component-did-update input-component-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [on-update on-change argv comp jsprops first-child]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops {:synthetic-on-update on-update\n                                         :synthetic-on-change on-change})\n       (make-element argv comp jsprops first-child)))})\n\n\n(defn reagent-input\n  []\n  (when (nil? reagent-input-class)\n    (set! reagent-input-class (comp/create-class input-spec)))\n  reagent-input-class)\n\n(defn reagent-synthetic-input\n  []\n  (when (nil? reagent-synthetic-input-class)\n    (set! reagent-synthetic-input-class (comp/create-class synthetic-input-spec)))\n  reagent-synthetic-input-class)\n\n\n;;; Conversion from Hiccup forms\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id class] (->> hiccup-tag name (re-matches re-tag) next)\n        class (when-not (nil? class)\n                (string/replace class #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\"\n                     (comp/comp-name)))\n    #js{:name tag\n        :id id\n        :className class}))\n\n(defn try-get-key [x]\n  ;; try catch to avoid clojurescript peculiarity with\n  ;; sorted-maps with keys that are numbers\n  (try (get x :key)\n       (catch :default e)))\n\n(defn get-key [x]\n  (when (map? x)\n    (try-get-key x)))\n\n(defn key-from-vec [v]\n  (if-some [k (-> (meta v) get-key)]\n    k\n    (-> v (nth 1 nil) get-key)))\n\n(defn reag-element [tag v]\n  (let [c (comp/as-class tag)\n        jsprops #js{:argv v}]\n    (when-some [key (key-from-vec v)]\n      ($! jsprops :key key))\n    (react/createElement c jsprops)))\n\n(defn adapt-react-class\n  ([c {:keys [synthetic-input]}]\n   (let [on-update (:on-update synthetic-input)\n         on-change (:on-change synthetic-input)]\n     (when synthetic-input\n       (assert (fn? on-update))\n       (assert (fn? on-change)))\n     (let [wrapped (doto (->NativeWrapper)\n                     ($! :name c)\n                     ($! :id nil)\n                     ($! :class nil))\n           wrapped (if synthetic-input\n                     (doto wrapped\n                       ($! :syntheticInput true))\n                     wrapped)\n           wrapped (if synthetic-input\n                     (doto wrapped\n                       ($! :syntheticOnChange on-change))\n                     wrapped)\n           wrapped (if synthetic-input\n                     ;; This is a synthetic input component, i.e. it has a complex\n                     ;; nesting of elements such that the root node is not necessarily\n                     ;; the <input> tag we need to control, and/or it needs to execute\n                     ;; custom code when updated values are written so we provide an affordance\n                     ;; to configure a setter fn that can choose a different DOM node\n                     ;; than the root node if it wants, and can supply a function hooked\n                     ;; to value updates so it can maintain its own component state as needed.\n                     (doto wrapped\n                       ($! :syntheticOnUpdate on-update))\n                     wrapped)]\n       wrapped)))\n  ([c]\n   (adapt-react-class c {})))\n\n(def tag-name-cache #js{})\n\n(defn cached-parse [x]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (aset tag-name-cache x (parse-tag x))))\n\n(declare as-element)\n\n(defn native-element [parsed argv first]\n  (let [comp ($ parsed :name)\n        synthetic-input ($ parsed :syntheticInput)]\n    (let [props (nth argv first nil)\n          hasprops (or (nil? props) (map? props))\n          jsprops (convert-props (if hasprops props) parsed)\n          first-child (+ first (if hasprops 1 0))]\n      (if (or synthetic-input (input-component? comp))\n        (-> (if synthetic-input\n              ;; If we are dealing with a synthetic input, use the synthetic-input-spec form:\n              [(reagent-synthetic-input)\n               ($ parsed :syntheticOnUpdate)\n               ($ parsed :syntheticOnChange)\n               argv\n               comp\n               jsprops\n               first-child]\n              ;; Else use the regular input-spec form:\n              [(reagent-input) argv comp jsprops first-child])\n            (with-meta (meta argv))\n            as-element)\n        (let [key (-> (meta argv) get-key)\n              p (if (nil? key)\n                  jsprops\n                  (oset jsprops \"key\" key))]\n          (make-element argv comp p first-child))))))\n\n(defn str-coll [coll]\n  (if (dev?)\n    (str (prewalk (fn [x]\n                    (if (fn? x)\n                      (let [n (util/fun-name x)]\n                        (case n \"\" x (symbol n)))\n                      x)) coll))\n    (str coll)))\n\n(defn hiccup-err [v & msg]\n  (str (apply str msg) \": \" (str-coll v) \"\\n\" (comp/comp-name)))\n\n(defn vec-to-elem [v]\n  (assert (pos? (count v)) (hiccup-err v \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (hiccup-err v \"Invalid Hiccup form\"))\n    (cond\n      (hiccup-tag? tag)\n      (let [n (name tag)\n            pos (.indexOf n \">\")]\n        (case pos\n          -1 (native-element (cached-parse n) v 1)\n          0 (let [comp (nth v 1 nil)]\n              ;; Support [:> comp ...]\n              (assert (= \">\" n) (hiccup-err v \"Invalid Hiccup tag\"))\n              (assert (or (string? comp) (fn? comp))\n                      (hiccup-err v \"Expected React component in\"))\n              (native-element #js{:name comp} v 2))\n          ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n          (recur [(subs n 0 pos)\n                  (assoc v 0 (subs n (inc pos)))])))\n\n      (instance? NativeWrapper tag)\n      (native-element tag v 1)\n\n      :else (reag-element tag v))))\n\n(declare expand-seq)\n(declare expand-seq-check)\n\n(defn as-element [x]\n  (cond (js-val? x) x\n        (vector? x) (vec-to-elem x)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x)\n                   (expand-seq x))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(set! comp/as-element as-element)\n\n(defn expand-seq [s]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (aset a i (as-element (aget a i))))\n    a))\n\n(defn expand-seq-dev [s o]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (let [val (aget a i)]\n        (when (and (vector? val)\n                   (nil? (key-from-vec val)))\n          ($! o :no-key true))\n        (aset a i (as-element val))))\n    a))\n\n(defn expand-seq-check [x]\n  (let [ctx #js{}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx))]\n    (when derefed\n      (warn (hiccup-err x \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when ($ ctx :no-key)\n      (warn (hiccup-err x \"Every element in a seq should have a unique :key\")))\n    res))\n\n;; From https://github.com/babel/babel/commit/1d0e68f5a19d721fe8799b1ea331041d8bf9120e\n;; (def react-element-type (or (and (exists? js/Symbol)\n;;                                  ($ js/Symbol :for)\n;;                                  ($ js/Symbol for \"react.element\"))\n;;                             60103))\n\n;; (defn make-element-fast [argv comp jsprops first-child]\n;;   (let [key (some-> jsprops ($ :key))\n;;         ref (some-> jsprops ($ :ref))\n;;         props (if (nil? jsprops) (js-obj) jsprops)]\n;;     ($! props :children\n;;         (case (- (count argv) first-child)\n;;           0 nil\n;;           1 (as-element (nth argv first-child))\n;;           (reduce-kv (fn [a k v]\n;;                        (when (>= k first-child)\n;;                          (.push a (as-element v)))\n;;                        a)\n;;                      #js[] argv)))\n;;     (js-obj \"key\" key\n;;             \"ref\" ref\n;;             \"props\" props\n;;             \"$$typeof\" react-element-type\n;;             \"type\" comp\n;;             ;; \"_store\" (js-obj)\n;;             )))\n\n(defn make-element [argv comp jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement comp jsprops)\n\n    1 (react/createElement comp jsprops\n          (as-element (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                           (.push a (as-element v)))\n                         a)\n                       #js[comp jsprops] argv))))\n"]}