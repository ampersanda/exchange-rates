{"version":3,"file":"exhangeratesapi.core.js","sources":["exhangeratesapi/core.cljs"],"mappings":"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","names":["exhangeratesapi.core/default-base","js/exhangeratesapi","js/exhangeratesapi.core","js/exhangeratesapi.core.app-state","exhangeratesapi.core/app-state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","exhangeratesapi.core/exchange-rates","base-placeholder","api-url","reagent.core/create-class","this","ajax.core.GET.cljs$core$IFn$_invoke$arity$variadic","cljs.core/deref","r","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","p__11813","map__11814","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","status","status-text","js/console.error","js/alert","G__11816","js/Error","status-text/","selected-option","p1__11810#","exchange","base","rates","bases","added-rates","date","value-to-exchange","e","v","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/reset!","p1__11811#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","cljs.core/conj","p1__11812#","cljs.core/disj","exhangeratesapi.core/start","G__11818","G__11819","reagent.core/render-component","js/document","exhangeratesapi.core/init","exhangeratesapi.core/stop","js/console.log"],"sourcesContent":["(ns exhangeratesapi.core\n  (:require [reagent.core :as reagent\n             :refer           [atom]]\n            [ajax.core :refer [GET POST]]))\n\n(def default-base \"USD\")\n\n(defonce app-state\n  (atom\n   {:exchange {:base        default-base\n               :last-update-date nil\n               :bases       '()\n               :rates       nil\n               :added-rates #{}\n               :value 1}}))\n\n(defn exchange-rates []\n  (let [base-placeholder \"Please select currecy base..\"\n        api-url \"https://api.exchangeratesapi.io/latest\"]\n\n    (reagent/create-class\n     {:display-name         \"exchange-rates\"\n      :component-will-mount (fn [this]\n                              (GET\n                                api-url\n                                {:params        {:base (:base (:exchange @app-state))}\n                                 :handler       (fn [r]\n                                                  (swap! app-state assoc-in [:exchange :last-update-date] (get-in r [\"date\"]))\n                                                                                                          ;; add keys of base rates to atom\n                                                  (swap! app-state assoc-in [:exchange :bases] (-> r (get-in [\"rates\"]) (keys)))\n                                                                                                          ;; add rates to atom\n                                                  (swap! app-state assoc-in [:exchange :rates] (get-in r [\"rates\"])))\n\n                                 :error-handler (fn [{:keys [status status-text]}]\n                                                  (js/console.error (str \"Something Bad happened: \" status \" \" status-text))\n                                                  (js/alert (case status\n                                                              0 (str status-text. \"Please check you internet connection\"))))}))\n      \n      :reagent-render       (let [selected-option (atom default-base)]\n\n                              ;; render \n                              (fn []\n                                (let [exchange    (:exchange @app-state)\n                                      base        (:base exchange)\n                                      rates       (:rates exchange)\n                                      bases       (:bases exchange)\n                                      added-rates (:added-rates exchange)\n                                      date (:last-update-date exchange)\n                                      value-to-exchange (:value exchange)]\n                                  [:div\n                                   [:div.bases\n                                    [:p (str \"latest update date -> \" date)]\n\n                                    ; [:label {:for \"bases\"} \"Base Currency\"]\n                                    ; [:select\n                                    ;  {:name          \"bases\"\n                                    ;   :default-value base\n                                    ;   :on-change     (fn [e]\n                                    ;                    (let  [v (.. e -target -value)]\n                                    ;                      (if (= base-placeholder v)\n                                    ;                        default-base\n                                    ;                        (swap! app-state assoc-in [:exchange :base] v))))}\n                                    ;  [:option base-placeholder]\n                                    ;  (map #(vector :option {:key %} %) bases)]\n                                    ; [:p (str \"Selected Base -> \" (:base exchange))]\n\n                                    ;; value to exchange\n                                    [:label {:for \"base-value\"}]\n                                    [:input {:type \"number\"\n                                             :default-value 1\n                                             :max-length 10\n                                             :placeholder \"Input number to exchange\"\n                                             :on-change #(swap! app-state assoc-in [:exchange :value] (-> % .-currentTarget .-value))}] base\n                                    [:br]\n\n                                                                      ;; input\n                                    [:label {:for \"add-base\"} \"Add Currency\"]\n                                    [:select\n                                     {:name      \"add-base\"\n                                      :on-change (fn [e]\n                                                   (let [v (.. e -target -value)]\n                                                     (if (= base-placeholder v) default-base (reset! selected-option v))))}\n                                     [:option base-placeholder]\n                                     (map #(vector :option {:key %} %) bases)]\n\n                                    [:button {:on-click\n                                              #(swap! app-state update-in\n                                                      [:exchange :added-rates]\n                                                      conj {:base @selected-option\n                                                            :rate (-> rates (get @selected-option))})} \"Add\"]\n\n                                                                                                          ;; added rates                                  \n                                    (if added-rates\n                                      [:div\n                                       [:ul\n                                        (map #(vector :li\n                                                      {:key (:base %)}\n                                                      [:span \n                                                       (str (* value-to-exchange (:rate %)) \" \" (:base %))\n                                                       [:button {:on-click (fn [e]\n                                                                             (swap! app-state update-in\n                                                                                    [:exchange :added-rates]\n                                                                                    disj {:base (:base %)\n                                                                                          :rate (:rate %)}))} \"delete\"]]\n                                                      ) added-rates)]]\n                                      [:p \"no rates\"])]])))})))\n\n\n(defn start []\n  (reagent/render-component [exchange-rates]\n                            (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  (start))\n\n(defn stop []\n  (js/console.log \"stop\"))\n"]}