{"version":3,"file":"exhangeratesapi.core.js","sources":["exhangeratesapi/core.cljs"],"mappings":"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","names":["exhangeratesapi.core/start","js/exhangeratesapi","js/exhangeratesapi.core","js/exhangeratesapi.core.app-state","exhangeratesapi.core/app-state","base-placeholder","reagent.core/create-class","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","value-to-exchange","p1__12100#","added-rates","api-url","date","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","selected-option","v","exhangeratesapi.core/default-base","cljs.core/reset!","js/console.error","status","status-text","p1__12098#","exchange","cljs.core/deref","G__12106","G__12107","reagent.core/render-component","exhangeratesapi.core/exchange-rates","cljs.core/conj","rates","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","js/console.log","response","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","js/alert","G__12104","js/Error","this","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","exhangeratesapi.core/init","status-text/","cljs.core.get.cljs$core$IFn$_invoke$arity$2","js/document","ajax.core.GET.cljs$core$IFn$_invoke$arity$variadic","base","exhangeratesapi.core/stop","e","p__12101","map__12102","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","p1__12099#","bases","reagent.core.atom.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns exhangeratesapi.core\n  (:require [reagent.core :as reagent\n             :refer           [atom]]\n            [ajax.core :refer [GET POST]]))\n\n(def default-base \"USD\")\n\n(defonce app-state\n  (atom\n   {:exchange {:base        default-base\n               :last-update-date nil\n               :bases       '()\n               :rates       nil\n               :added-rates #{}\n               :value 1}}))\n\n(defn exchange-rates []\n  (let [base-placeholder \"Please select currecy base..\"\n        api-url \"https://api.exchangeratesapi.io/latest\"]\n\n    (reagent/create-class\n     {:display-name         \"exchange-rates\"\n      :component-will-mount (fn [this]\n                              (GET\n                                api-url\n                                {:params        {:base (:base (:exchange @app-state))}\n                                 :handler       (fn [response]\n                                                  (swap! app-state assoc-in [:exchange :last-update-date]\n                                                         (-> response (get-in [\"date\"])))\n\n                                                                                                          ;; add keys of base rates to atom\n                                                  (swap! app-state assoc-in [:exchange :bases]\n                                                         (-> response (get-in [\"rates\"]) (keys)))\n\n                                                                                                          ;; add rates to atom\n                                                  (swap! app-state assoc-in [:exchange :rates]\n                                                         (-> response (get-in [\"rates\"]))))\n\n                                 :error-handler (fn [{:keys [status status-text]}]\n                                                  (js/console.error (str \"Something Bad happened: \" status \" \" status-text))\n                                                  (js/alert (case status\n                                                              0 (str status-text. \"Please check you internet connection\"))))}))\n      :reagent-render       (let [selected-option (atom default-base)]\n\n                              ;; render \n                              (fn []\n                                (let [exchange    (:exchange @app-state)\n                                      base        (:base exchange)\n                                      rates       (:rates exchange)\n                                      bases       (:bases exchange)\n                                      added-rates (:added-rates exchange)\n                                      date (:last-update-date exchange)\n                                      value-to-exchange (:value exchange)]\n                                  [:div\n                                   [:div.bases\n                                    [:p (str \"latest update date -> \" date)]\n\n                                    ; [:label {:for \"bases\"} \"Base Currency\"]\n                                    ; [:select\n                                    ;  {:name          \"bases\"\n                                    ;   :default-value base\n                                    ;   :on-change     (fn [e]\n                                    ;                    (let  [v (.. e -target -value)]\n                                    ;                      (if (= base-placeholder v)\n                                    ;                        default-base\n                                    ;                        (swap! app-state assoc-in [:exchange :base] v))))}\n                                    ;  [:option base-placeholder]\n                                    ;  (map #(vector :option {:key %} %) bases)]\n                                    ; [:p (str \"Selected Base -> \" (:base exchange))]\n\n                                    ;; value to exchange\n                                    [:label {:for \"base-value\"}]\n                                    [:input {:type \"number\"\n                                             :default-value 1\n                                             :max-length 10\n                                             :placeholder \"Input number to exchange\"\n                                             :on-change #(swap! app-state assoc-in [:exchange :value] (-> % .-currentTarget .-value))}] base\n                                    [:br]\n\n                                                                      ;; input\n                                    [:label {:for \"add-base\"} \"Add Currency\"]\n                                    [:select\n                                     {:name      \"add-base\"\n                                      :on-change (fn [e]\n                                                   (let [v (.. e -target -value)]\n                                                     (if (= base-placeholder v) default-base (reset! selected-option v))))}\n                                     [:option base-placeholder]\n                                     (map #(vector :option {:key %} %) bases)]\n\n                                    [:button {:on-click\n                                              #(swap! app-state update-in\n                                                      [:exchange :added-rates]\n                                                      conj {:base @selected-option\n                                                            :rate (-> rates (get @selected-option))})} \"Add\"]\n\n                                                                                                          ;; added rates                                  \n                                    (if added-rates\n                                      [:div\n                                       [:ul\n                                        (map #(vector :li\n                                                      {:key (:base %)}\n                                                      (str (* value-to-exchange (:rate %)) \" \" (:base %))) added-rates)]]\n                                      [:p \"no rates\"])]])))})))\n\n\n(defn start []\n  (reagent/render-component [exchange-rates]\n                            (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  (start))\n\n(defn stop []\n  (js/console.log \"stop\"))\n"]}