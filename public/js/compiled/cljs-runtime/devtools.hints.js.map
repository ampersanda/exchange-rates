{"version":3,"file":"devtools.hints.js","sources":["devtools/hints.cljs"],"mappings":"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","names":["res","devtools.hints/*original-global-error-handler*","reader","where","devtools.hints/extend-content","content","lines","line-number","min-length","prev-line-number","devtools.context/get-root","prototype","devtools.hints/*original-type-error-prototype-to-string*","xhr","url","devtools.hints/retrieve-javascript-source","file","js/XMLHttpRequest","devtools.hints/error-object-sense","error","e13310","cljs.core/empty?","str","devtools.hints/mark-null-call-site-location","column","devtools.hints/processed-errors","cljs.core/volatile!","line","devtools.hints/get-line","devtools.hints/get-processed-errors!","devtools.hints/*installed*","new-content","top-item","cljs.core/re-matches","message","devtools.hints/install-type-error-enhancer","devtools.hints/empty-as-nil","devtools.hints/install!","stack-trace","devtools.hints/parse-stacktrace","native-stack-trace","val","devtools.hints/set-processed-errors!","js/WeakSet","temp__5457__auto__","sense","self","prev-line","G__13301","G__13302","G__13303","G__13304","cljs.stacktrace/parse-stacktrace","temp__5455__auto__","seen-errors","marked-line","_e","or__3949__auto__","devtools.prefs/pref","js/Error","devtools.hints/mark-call-closed-at-column","devtools.hints/global-error-handler","cljs.core/vreset!","devtools.hints/make-sense-of-the-error","devtools.hints/type-error-to-string","devtools.hints/ajax-reader","map__13312","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","devtools.context/get-console","js/TypeError","cljs.core/deref","postfix","n","devtools.hints/available?","prefix","devtools.hints/installed?","cljs.core/not","cljs.core/second","devtools.hints/uninstall!","cljs.core/count"],"sourcesContent":["(ns devtools.hints\n  (:require-macros [devtools.compiler :refer [check-compiler-options!]])\n  (:require [devtools.prefs :refer [pref]]\n            [devtools.context :as context]\n            [cljs.stacktrace :as stacktrace]))\n\n; cljs.stacktrace does not play well in :advanced mode optimizations, see https://github.com/binaryage/cljs-devtools/issues/37\n(check-compiler-options!)\n\n(defn ^:dynamic available? []\n  true)\n\n; Question: How much time have you lost staring at \"Cannot read property 'call' of null\" kind of errors?\n;\n; ---------------------------------------------------------------------------------------------------------------------------\n;\n; The idea is to try enhance error object's .stack and .message fields with additional info about\n; the call site causing null type error. With optimizations :none the name of the null call site can be seen.\n;\n; The enahncing handler function tries to:\n; 1) parse error's stack trace.\n; 2) look original javascript source file up (via sync AJAX fetch by default).\n; 3) locate reported line and column.\n; 4) presents problematic line with a column hint as addition to .stack or .message strings.\n\n; Technically the trick here is to override TypeError.prototype.toString\n; and global window.onerror handler to enhance uncaught errors.\n;\n; With that we should handle two situations:\n; 1) either error gets printed (typically in user's catch via console), so patched toString() method gets called.\n; 2) or it is uncaught and our global error handler should take care of possible enhancement\n;    before devtools present it to the user themselves.\n;\n; note: Tested under Chrome only\n\n(def ^:dynamic *installed* false)\n(def ^:dynamic *original-global-error-handler* nil)\n(def ^:dynamic *original-type-error-prototype-to-string* nil)\n\n(def processed-errors (volatile! nil))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn set-processed-errors! [val]\n  (vreset! processed-errors val))\n\n(defn get-processed-errors! []\n  (if-let [val @processed-errors]\n    val\n    (if (exists? js/WeakSet)\n      (set-processed-errors! (js/WeakSet.)))))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn empty-as-nil [str]\n  (if (empty? str) nil str))\n\n(defn ajax-reader [url]\n  (let [xhr (js/XMLHttpRequest.)]\n    (.open xhr \"GET\" url false)\n    (.send xhr)\n    (empty-as-nil (.-responseText xhr))))\n\n(defn retrieve-javascript-source [where]\n  (let [reader (or (pref :file-reader) ajax-reader)]\n    (reader where)))\n\n(defn get-line [lines line-number]\n  (aget lines (dec line-number)))                                                                                             ; line numbering is 1-based\n\n(defn extend-content [content lines line-number min-length]\n  (if (or (> (count content) min-length)\n          (not (pos? line-number)))\n    content\n    (let [prev-line-number (dec line-number)\n          prev-line (get-line lines prev-line-number)\n          new-content (str prev-line \"\\n\" content)]\n      (extend-content new-content lines prev-line-number min-length))))\n\n(defn mark-call-closed-at-column [line column]\n  (let [n (dec column)                                                                                                        ; column number is 1-based\n        prefix (.substring line 0 n)\n        postfix (.substring line n)]\n    (str prefix \" <<< \u2622 NULL \u2622 <<< \" postfix)))\n\n(defn mark-null-call-site-location [file line-number column]\n  (let [content (retrieve-javascript-source file)\n        lines (.split content \"\\n\")\n        line (get-line lines line-number)\n        marked-line (mark-call-closed-at-column line column)\n        min-length (or (pref :sanity-hint-min-length) 128)]\n    (extend-content marked-line lines line-number min-length)))\n\n(defn make-sense-of-the-error [message file line-number column]\n  (cond\n    (re-matches #\"Cannot read property 'call' of.*\" message) (mark-null-call-site-location file line-number column)\n    :else nil))\n\n(defn parse-stacktrace [native-stack-trace]\n  (stacktrace/parse-stacktrace {} native-stack-trace {:ua-product :chrome} {:asset-root \"\"}))\n\n(defn error-object-sense [error]\n  (try\n    (let [native-stack-trace (.-stack error)\n          stack-trace (parse-stacktrace native-stack-trace)\n          top-item (second stack-trace)                                                                                       ; first line is just an error message\n          {:keys [file line column]} top-item]\n      (make-sense-of-the-error (.-message error) file line column))\n    (catch :default _e\n      ; silently fail in case of troubles parsing stack trace\n      false)))\n\n(defn type-error-to-string [self]\n  (if-let [seen-errors (get-processed-errors!)]\n    (when-not (.has seen-errors self)\n      (.add seen-errors self)\n      (when-let [sense (error-object-sense self)]\n        (set! (.-message self) (str (.-message self) \", a sanity hint:\\n\" sense)))))                                          ; this is dirty, patch message field before it gets used\n  (.call *original-type-error-prototype-to-string* self))\n\n(defn global-error-handler [message url line column error]\n  (let [res (if *original-global-error-handler*\n              (*original-global-error-handler* message url line column error))]\n    (if-not res\n      (when-let [sense (error-object-sense error)]\n        (.info (context/get-console) \"A sanity hint for incoming uncaught error:\\n\" sense)\n        false)\n      true)))\n\n(defn install-type-error-enhancer []\n  (set! *original-global-error-handler* (.-onerror (context/get-root)))\n  (set! (.-onerror (context/get-root)) global-error-handler)\n  (let [prototype (.-prototype js/TypeError)]\n    (set! *original-type-error-prototype-to-string* (.-toString prototype))\n    (set! (.-toString prototype) #(this-as self (type-error-to-string self)))))                                               ; work around http://dev.clojure.org/jira/browse/CLJS-1545\n\n; -- installation -----------------------------------------------------------------------------------------------------------\n\n(defn installed? []\n  *installed*)\n\n(defn install! []\n  (when-not *installed*\n    (set! *installed* true)\n    (install-type-error-enhancer)\n    true))\n\n(defn uninstall! []\n  (when *installed*\n    (set! *installed* false)\n    (assert *original-type-error-prototype-to-string*)\n    (set! (.-onerror (context/get-root)) *original-global-error-handler*)\n    (let [prototype (.-prototype js/TypeError)]\n      (set! (.-toString prototype) *original-type-error-prototype-to-string*))))\n"]}