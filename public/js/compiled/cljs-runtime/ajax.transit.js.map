{"version":3,"file":"ajax.transit.js","sources":["ajax/transit.cljc"],"mappings":";;;;;;AAQA,4BAAA,oCAAA2B,hEAAMxB;AAAN,AAAA,IAAAyB,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAC,gCAAA,AAAAD,+BAAA,KAAA,OAAA,QAAA,AAAAE,8CAAAC,mBAAAH,YAAAA;WAAA,AAAAI,4CAAAJ,eAAA,lEAA4BxB;AAC1B,IAAAE,mBAAIF,vBADN;AACE,AAAA,oBAAAE;AAAAA;;AAAA;;;wEAGWF,KAAKH,7EADR,gCAAA,hCAAMmB;AAEJ,IAAMT,SAAO,iBAAAL,mBAAI,AAAA,uFAASL,xIAF5B;AAEe,AAAA,oBAAAK;AAAAA;;AACI,OAACgB,uDAASlB,KAAKH;;;AAC9B,AAFF;sEAE4BM;AAA1B,AACE,OAACgB,wBAAQZ,OAAOJ;;;;AAMhC,AAAA;;;;;;;;;sCAAA,8CAAAK,pFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,kEAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,oEAAA,pEAAMD;AAAN,AAQM,yEAAA,lEAACU;;;+EACHvB,/EATJ,AAAA,oEAAA,pEAAMa;AAUD,IAAMV,OAAK,AAACD,0BAAaF,rCAV9B;IAWWQ,YAAU,4OAAA,OAAA,jPAAI,EAAI,kDAAA,lDAACC,6CAAEN,gEACH,kDAAA,lDAACM,6CAAEN;AAF3B,AAAA,kDAAA,iGAAA,qEAIiB,CAAA,mEAA4BK,lLADnC,AAACW,8BAAiBhB,KAAKH;;;AAbtC,AAAA,8DAAA,9DAAMa;;AAAN,AAgBU,+BAAA,/BAAMd,sEAAiBC;AACrB,IAAMI,SAAO,iBAAAC,mBAAI,AAAA,sFAASL,vIAD5B;AACe,AAAA,oBAAAK;AAAAA;;AACI,8DAAA,vDAACE,4GAAeP;;;AADjC,AAEE;sEAA2Be;AAA3B,AACE,OAACS,uBAAOpB,OAAO,AAACqB,qBAASV;;;;AASzC,AAAA;;;;;;;uCAAA,+CAAAJ,tFAAMO;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,mEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAJ,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,qEAAA,rEAAMI;AAAN,AAMM,0EAAA,nEAACE;;;gFACHpB,hFAPJ,AAAA,qEAAA,rEAAMkB;AAQD,OAACjB,mEAAwB,AAACC,0BAAaF,MAAMA,1GARlD;;;gFASIG,KAAKH,rFATT,AAAA,qEAAA,rEAAMkB;gJAWO,AAACnB,6BAAgBC,7KADzB,gDAAA,2CAAA,wFAAA,oEAAA,UAAA,qEAAA,mFAAA,lZAACgB,PAVN;;;AAAA,AAAA,+DAAA,/DAAME;;AAAN","names":["ajax.transit/transit-read-fn","opts","ajax.transit.transit_response_format.cljs$core$IFn$_invoke$arity$2","ajax.transit/transit-type","type","reader","or__3949__auto__","params","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2","mime-type","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","writer","var_args","G__11940","ajax.transit/transit-request-format","js/Error","response","ajax.interceptors/map->ResponseFormat","G__11953","ajax.transit/transit-response-format","ajax.transit/transit-write-fn","ajax.transit.transit_response_format.cljs$core$IFn$_invoke$arity$1","cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2","cognitect.transit/write","ajax.transit.transit_request_format.cljs$core$IFn$_invoke$arity$1","cognitect.transit/read","ajax.protocols/-body","p__11934","map__11935","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns ajax.transit\n    (:require [cognitect.transit :as t]\n              [ajax.interceptors :as i]\n              [ajax.protocols :as pr]\n              [ajax.util :as u]\n              #? (:clj  [poppea :as p]))\n    #? (:cljs (:require-macros [poppea :as p])))\n\n(defn transit-type [{:keys [type]}]\n  (or type #? (:cljs :json :clj :msgpack)))\n\n#? (:cljs (defn transit-write-fn\n            [type opts]\n            (let [writer (or (:writer opts)\n                             (t/writer type opts))]\n              (fn transit-write-params [params]\n                (t/write writer params))))\n    :clj (p/defn-curried transit-write-fn\n           [type opts stream params]\n           (let [writer (t/writer stream type opts)]\n             (t/write writer params))))\n\n(defn transit-request-format\n  \"Returns a Transit request format.\n\n   Options include:\n   :writer Explicit Transit writer. If not supplied one will be created using the other options.\n           The default type is :json for ClojureScript and :msgpack for Clojure.\n   :type Override the default transit type with value :json, :json-verbose or :msgpack\n   :handlers Custom Transit handlers (refer to Transit documentation)\"\n  ([] (transit-request-format {}))\n  ([opts]\n     (let [type (transit-type opts)\n           mime-type (if (or (= type :json)\n                             (= type :json-verbose)) \"json\" \"msgpack\")]\n       {:write (transit-write-fn type opts)\n        :content-type (str \"application/transit+\" mime-type)})))\n\n#? (:cljs (defn transit-read-fn [opts]\n            (let [reader (or (:reader opts)\n                             (t/reader :json opts))]\n              (fn transit-read-response [response]\n                (t/read reader (pr/-body response)))))\n    :clj (p/defn-curried transit-read-fn [request response]\n           (let [content-type (u/get-content-type response)\n                 type (if (.contains content-type \"msgpack\")\n                        :msgpack :json)\n                 stream (pr/-body response)\n                 reader (t/reader stream type request)]\n             (t/read reader))))\n\n(defn transit-response-format\n  \"Returns a Transit request format.\n\n   Options include:\n   :reader (CLJS only) Explicit Transit reader. If not supplied one will be created using the other options.\n   :handlers Custom Transit handlers (refer to Transit documentation)\"\n  ([] (transit-response-format {}))\n  ([opts]\n     (transit-response-format (transit-type opts) opts))\n  ([type opts]\n     (i/map->ResponseFormat\n      {:read (transit-read-fn opts)\n       :description \"Transit\"\n       :content-type\n       #? (:cljs [\"application/transit+json\"]\n           :clj [\"application/transit+msgpack\"\n                 \"application/transit+json\"])})))\n"]}