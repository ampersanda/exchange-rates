{"version":3,"file":"cljs.stacktrace.js","sources":["cljs/stacktrace.cljc"],"mappings":"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","names":["clojure.string/replace","clojure.string/blank?","frame-str","p__12616","map__12617","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.stacktrace/mapped-frame","cljs.core/vec","cljs.core.map.cljs$core$IFn$_invoke$arity$3","call-merge","function","clojure.string.split.cljs$core$IFn$_invoke$arity$2","st","repl-env","err","output-dir","opts","p1__12623#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","mapped-frames","f","idx","p__12346","p__12347","vec__12348","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__12351","pre","post","x","i","file","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.stacktrace/parse-file","sb__4462__auto__","goog.string/StringBuffer","*print-newline*12629","cljs.core/*print-newline*","*print-fn*12630","cljs.core/*print-fn*","x__4463__auto__","vec__12340","vec__12343","xs","flc","G__12355","line","temp__5455__auto__","columns","source-map","var_args","G__12628","cljs.stacktrace/mapped-stacktrace-str","js/Error","parse-source-loc-info","col-part","p1__12417#","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","cljs.stacktrace/starts-with?","cljs.stacktrace/chrome-st-el->frame","stacktrace","sms","and__3938__auto__","column","vec__12407","vec__12410","cljs.core/re-find","st-el","p1__12450#","cljs.stacktrace/parse-file-line-column","host","or__3949__auto__","host-port","port","clojure.string/trim","file'","no-source-file?","cljs.core/count","line-part","G__12354","cljs.core/not","munged-fn-name","cljs.core.range.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","asset-root","cljs.stacktrace/parse-stacktrace","cljs.stacktrace/string->regex","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","match","goog.string/endsWith","s0","s1","clojure.string/split-lines","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$3","G__12356","cljs.stacktrace/parse-int","file-part","file&line","cljs.stacktrace/firefox-clean-function","p__12508","map__12509","vec__12571","vec__12574","parts","p1__12396#","p__12550","map__12551","vec__12433","vec__12436","unmunged-call-name","cljs.core/first","s","js/RegExp","file-side","cljs.stacktrace/ends-with?","cljs.core/second","p__12463","map__12464","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","p1__12394#","line'","column'","call","adjust","get-best-column","default","cljs.stacktrace/firefox-st-el->frame","cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$3","p1__12418#","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","goog.string/startsWith","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/last","seq__12631","cljs.core/seq","chunk__12632","count__12633","i__12634","map__12635","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","map__12637","cljs.core/next","process-frame","cljs.core/contains?","G__12579","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.stacktrace/remove-ext","vec__12482","vec__12485","line-fn-side","urlpat","G__12625","cljs.stacktrace/mapped-stacktrace","p1__12419#","cljs.stacktrace/safari-st-el->frame","cljs.core/munge","p1__12601#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.stacktrace/mapped-line-column-call","file-and-line","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/PersistentHashMap","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","js/parseInt","vec__12619","asset-path","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","vec__12379","vec__12382","p1__12451#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p1__12452#","vec__12527","vec__12530","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/rest","call->function","p1__12602#","p2__12603#","cljs.core/inc","cljs.core/identity","mapped","p1__12395#","js/cljs","js/cljs.stacktrace","js/cljs.stacktrace.parse-stacktrace","method-table__4414__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4415__auto__","method-cache__4416__auto__","cached-hierarchy__4417__auto__","hierarchy__4418__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/get-global-hierarchy","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.stacktrace/output-directory","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","cljs.core/keys","clojure.string/starts-with?","cljs.core/memoize","p1__12622#","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","p__12359","p__12360","map__12361","map__12362"],"sourcesContent":[";; Copyright (c) Rich Hickey. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file epl-v10.html at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns cljs.stacktrace\n  (:require #?@(:clj  [[cljs.util :as util]\n                       [clojure.java.io :as io]]\n                :cljs [[goog.string :as gstring]])\n            [clojure.string :as string])\n  #?(:clj (:import [java.util.regex Pattern]\n                   [java.io File])))\n\n(defmulti parse-stacktrace\n  \"Parse a JavaScript stacktrace string into a canonical data form. The\n  arguments:\n\n  repl-env - the repl environment, an optional map with :host and :port keys\n             if the stacktrace includes url, not file references\n  st       - the original stacktrace string to parse\n  err      - an error map. :ua-product key defines the type of stacktrace parser\n             to use, for example :chrome\n  opts     - additional options. :output-dir maybe given in this argument if\n             :host and :port do not apply, for example, a file path\n\n  The canonical stacktrace representation can easily be mapped to a\n  ClojureScript one see mapped-stacktrace and mapped-stacktrace-str\"\n  (fn [repl-env st err opts] (:ua-product err)))\n\n(defn parse-int [s]\n  #?(:clj  (Long/parseLong s)\n     :cljs (js/parseInt s 10)))\n\n(defn starts-with?\n  #?(:cljs {:tag boolean})\n  [^String s0 s1]\n  #?(:clj  (.startsWith s0 s1)\n     :cljs (gstring/startsWith s0 s1)))\n\n(defn ends-with?\n  #?(:cljs {:tag boolean})\n  [^String s0 s1]\n  #?(:clj  (.endsWith s0 s1)\n     :cljs (gstring/endsWith s0 s1)))\n\n(defn string->regex [s]\n  #?(:clj  (Pattern/compile s)\n     :cljs (js/RegExp. s)))\n\n(defn output-directory [opts]\n  #?(:clj  (util/output-directory opts)\n     :cljs (or (:output-dir opts) \"out\")))\n\n(defmethod parse-stacktrace :default\n  [repl-env st err opts] st)\n\n(defn parse-file-line-column [flc]\n  (if-not (re-find #\":\" flc)\n    [flc nil nil]\n    (let [xs (string/split flc #\":\")\n          [pre [line column]]\n          (reduce\n            (fn [[pre post] [x i]]\n              (if (<= i 2)\n                [pre (conj post x)]\n                [(conj pre x) post]))\n            [[] []] (map vector xs (range (count xs) 0 -1)))\n          file (string/join \":\" pre)]\n      [(cond-> file\n         (starts-with? file \"(\") (string/replace \"(\" \"\"))\n       (parse-int\n         (cond-> line\n           (ends-with? line \")\") (string/replace \")\" \"\")))\n       (parse-int\n         (cond-> column\n           (ends-with? column \")\") (string/replace \")\" \"\")))])))\n\n(defn parse-file\n  \"Given a browser file url convert it into a relative path that can be used\n   to locate the original source.\"\n  [{:keys [host host-port port] :as repl-env} file {:keys [asset-path] :as opts}]\n  (let [urlpat (if host\n                 (string->regex\n                   (str \"http://\" host \":\" (or host-port port) \"/\"))\n                 \"\")\n        match  (if host\n                 (re-find urlpat file)\n                 (contains? opts :output-dir))]\n    (if match\n      (-> file\n        (string/replace urlpat \"\")\n        (string/replace\n          (string->regex\n            ;; if :asset-path specified drop leading slash\n            (str \"^\" (or (and asset-path (string/replace asset-path #\"^/\" \"\"))\n                         (output-directory opts)) \"/\"))\n          \"\"))\n      (if-let [asset-root (:asset-root opts)]\n        (string/replace file asset-root \"\")\n        (throw\n          (ex-info (str \"Could not relativize URL \" file)\n            {:type :parse-stacktrace\n             :reason :relativize-url}))))))\n\n;; -----------------------------------------------------------------------------\n;; Chrome Stacktrace\n\n(defn chrome-st-el->frame\n  [repl-env st-el opts]\n  (let [xs (-> st-el\n             (string/replace #\"\\s+at\\s+\" \"\")\n             (string/split #\"\\s+\"))\n        [function flc] (if (== 1 (count xs))\n                         [nil (first xs)]\n                         [(first xs) (last xs)])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (string/replace function #\"Object\\.\" \"\")\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (string/replace function #\"Object\\.\" \"\")\n         :line nil\n         :column nil}))))\n\n(comment\n  (chrome-st-el->frame {:host \"localhost\" :port 9000}\n    \"\\tat cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5356:34)\" {})\n  )\n\n(defmethod parse-stacktrace :chrome\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(not (starts-with? % \"    at eval\")))\n    (map #(chrome-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4258:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/out/cljs/core.js:4288:19)\n    at cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5356:34)\n    at http://localhost:9000/out/cljs/core.js:16971:89\n    at cljs.core.map.cljs$core$map__2 (http://localhost:9000/out/cljs/core.js:16972:3)\n    at http://localhost:9000/out/cljs/core.js:10981:129\n    at cljs.core.LazySeq.sval (http://localhost:9000/out/cljs/core.js:10982:3)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (http://localhost:9000/out/cljs/core.js:11073:10)\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4239:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (http://localhost:9000/out/cljs/core.js:28706:14)\"\n    {:ua-product :chrome}\n    nil)\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/js/cljs/core.js:4258:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/js/cljs/core.js:4288:19)\n    at cljs$core$ffirst (http://localhost:9000/js/cljs/core.js:5356:34)\n    at http://localhost:9000/js/cljs/core.js:16971:89\n    at cljs.core.map.cljs$core$map__2 (http://localhost:9000/js/cljs/core.js:16972:3)\n    at http://localhost:9000/js/cljs/core.js:10981:129\n    at cljs.core.LazySeq.sval (http://localhost:9000/js/cljs/core.js:10982:3)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (http://localhost:9000/js/cljs/core.js:11073:10)\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/js/cljs/core.js:4239:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (http://localhost:9000/js/cljs/core.js:28706:14)\"\n    {:ua-product :chrome}\n    {:asset-path \"/js\"})\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4259:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/out/cljs/core.js:4289:19)\n    at cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5357:18)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:1:106)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:9:3)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:14:4)\n    at http://localhost:9000/out/clojure/browser/repl.js:23:267\n    at clojure$browser$repl$evaluate_javascript (http://localhost:9000/out/clojure/browser/repl.js:26:4)\n    at Object.callback (http://localhost:9000/out/clojure/browser/repl.js:121:169)\n    at goog.messaging.AbstractChannel.deliver (http://localhost:9000/out/goog/messaging/abstractchannel.js:142:13)\"\n    {:ua-product :chrome}\n    nil)\n\n  ;; Node.js example\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:3999:8)\n    at Object.cljs$core$first [as first] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:4018:19)\n    at cljs$core$ffirst (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:5161:34)\n    at /home/my/cool/project/.cljs_bootstrap/cljs/core.js:16006:88\n    at cljs.core.map.cljs$core$IFn$_invoke$arity$2 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:16007:3)\n    at cljs.core.LazySeq.sval (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:10244:109)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:10335:10)\n    at Object.cljs$core$seq [as seq] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:3980:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:28084:14)\n    at cljs.core.LazySeq.cljs$core$IPrintWithWriter$_pr_writer$arity$3 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:28812:18)\"\n    {:ua-product :chrome}\n    {:output-dir \"/home/my/cool/project/.cljs_bootstrap\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Safari Stacktrace\n\n(defn safari-st-el->frame\n  [repl-env st-el opts]\n  (let [[function flc] (if (re-find #\"@\" st-el)\n                         (string/split st-el #\"@\")\n                         [nil st-el])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (string/trim function)\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (string/trim function)\n         :line nil\n         :column nil}))))\n\n(comment\n  (safari-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4259:17\" {})\n\n  (safari-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/js/cljs/core.js:4259:17\" {:asset-path \"js\"})\n  )\n\n(defmethod parse-stacktrace :safari\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(not (starts-with? % \"eval code\")))\n    (remove string/blank?)\n    (map #(safari-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {}\n    \"cljs$core$seq@out/cljs/core.js:3999:17\n    cljs$core$first@out/cljs/core.js:4018:22\n    cljs$core$ffirst@out/cljs/core.js:5161:39\n    global code\"\n    {:ua-product :safari}\n    {:output-dir \"out\"})\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4259:17\ncljs$core$first@http://localhost:9000/out/cljs/core.js:4289:22\ncljs$core$ffirst@http://localhost:9000/out/cljs/core.js:5357:39\nhttp://localhost:9000/out/cljs/core.js:16972:92\nhttp://localhost:9000/out/cljs/core.js:16973:3\nhttp://localhost:9000/out/cljs/core.js:10982:133\nsval@http://localhost:9000/out/cljs/core.js:10983:3\ncljs$core$ISeqable$_seq$arity$1@http://localhost:9000/out/cljs/core.js:11074:14\ncljs$core$seq@http://localhost:9000/out/cljs/core.js:4240:44\ncljs$core$pr_sequential_writer@http://localhost:9000/out/cljs/core.js:28707:17\ncljs$core$IPrintWithWriter$_pr_writer$arity$3@http://localhost:9000/out/cljs/core.js:29386:38\ncljs$core$pr_writer_impl@http://localhost:9000/out/cljs/core.js:28912:57\ncljs$core$pr_writer@http://localhost:9000/out/cljs/core.js:29011:32\ncljs$core$pr_seq_writer@http://localhost:9000/out/cljs/core.js:29015:20\ncljs$core$pr_sb_with_opts@http://localhost:9000/out/cljs/core.js:29078:24\ncljs$core$pr_str_with_opts@http://localhost:9000/out/cljs/core.js:29092:48\ncljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29130:34\ncljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29139:39\neval code\neval@[native code]\nhttp://localhost:9000/out/clojure/browser/repl.js:23:271\nclojure$browser$repl$evaluate_javascript@http://localhost:9000/out/clojure/browser/repl.js:26:4\nhttp://localhost:9000/out/clojure/browser/repl.js:121:173\ndeliver@http://localhost:9000/out/goog/messaging/abstractchannel.js:142:21\nxpcDeliver@http://localhost:9000/out/goog/net/xpc/crosspagechannel.js:733:19\nmessageReceived_@http://localhost:9000/out/goog/net/xpc/nativemessagingtransport.js:321:23\nfireListener@http://localhost:9000/out/goog/events/events.js:741:25\nhandleBrowserEvent_@http://localhost:9000/out/goog/events/events.js:862:34\nhttp://localhost:9000/out/goog/events/events.js:276:42\"\n    {:ua-product :safari}\n    nil)\n  )\n\n;; -----------------------------------------------------------------------------\n;; Firefox Stacktrace\n\n(defn firefox-clean-function [f]\n  (as-> f f\n    (cond\n      (string/blank? f) nil\n      (not= (.indexOf f \"</\") -1)\n      (let [idx (.indexOf f \"</\")]\n        (.substring f (+ idx 2)))\n      :else f)\n    (-> f\n      (string/replace #\"<\" \"\")\n      (string/replace #?(:clj #\"\\/\" :cljs (js/RegExp. \"\\\\/\")) \"\"))))\n\n(defn firefox-st-el->frame\n  [repl-env st-el opts]\n  (let [[function flc] (if (re-find #\"@\" st-el)\n                         (string/split st-el #\"@\")\n                         [nil st-el])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (firefox-clean-function function)\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (firefox-clean-function function)\n         :line nil\n         :column nil}))))\n\n(comment\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4258:8\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.pr_str</cljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29138:8\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.pr_str</cljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29129:8\" {})\n  )\n\n(defmethod parse-stacktrace :firefox\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(= (.indexOf % \"> eval\") -1))\n    (remove string/blank?)\n    (map #(firefox-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4258:8\ncljs$core$first@http://localhost:9000/out/cljs/core.js:4288:9\ncljs$core$ffirst@http://localhost:9000/out/cljs/core.js:5356:24\ncljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\ncljs.core.map</cljs$core$map__2/<@http://localhost:9000/out/cljs/core.js:16970:1\ncljs.core.LazySeq.prototype.sval/self__.s<@http://localhost:9000/out/cljs/core.js:10981:119\ncljs.core.LazySeq.prototype.sval@http://localhost:9000/out/cljs/core.js:10981:13\ncljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1@http://localhost:9000/out/cljs/core.js:11073:1\ncljs$core$seq@http://localhost:9000/out/cljs/core.js:4239:8\ncljs$core$pr_sequential_writer@http://localhost:9000/out/cljs/core.js:28706:4\ncljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3@http://localhost:9000/out/cljs/core.js:29385:8\ncljs$core$pr_writer_impl@http://localhost:9000/out/cljs/core.js:28911:8\ncljs$core$pr_writer@http://localhost:9000/out/cljs/core.js:29010:8\ncljs$core$pr_seq_writer@http://localhost:9000/out/cljs/core.js:29014:1\ncljs$core$pr_sb_with_opts@http://localhost:9000/out/cljs/core.js:29077:1\ncljs$core$pr_str_with_opts@http://localhost:9000/out/cljs/core.js:29091:23\ncljs.core.pr_str</cljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29129:8\ncljs.core.pr_str</cljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29138:8\n@http://localhost:9000/out/clojure/browser/repl.js line 23 > eval:1:25\n@http://localhost:9000/out/clojure/browser/repl.js line 23 > eval:1:2\nclojure$browser$repl$evaluate_javascript/result<@http://localhost:9000/out/clojure/browser/repl.js:23:267\nclojure$browser$repl$evaluate_javascript@http://localhost:9000/out/clojure/browser/repl.js:23:15\nclojure$browser$repl$connect/</<@http://localhost:9000/out/clojure/browser/repl.js:121:128\ngoog.messaging.AbstractChannel.prototype.deliver@http://localhost:9000/out/goog/messaging/abstractchannel.js:142:5\ngoog.net.xpc.CrossPageChannel.prototype.xpcDeliver@http://localhost:9000/out/goog/net/xpc/crosspagechannel.js:733:7\ngoog.net.xpc.NativeMessagingTransport.messageReceived_@http://localhost:9000/out/goog/net/xpc/nativemessagingtransport.js:321:1\ngoog.events.fireListener@http://localhost:9000/out/goog/events/events.js:741:10\ngoog.events.handleBrowserEvent_@http://localhost:9000/out/goog/events/events.js:862:1\ngoog.events.getProxy/f<@http://localhost:9000/out/goog/events/events.js:276:16\"\n    {:ua-product :firefox}\n    nil)\n  )\n\n;; -----------------------------------------------------------------------------\n;; Rhino Stacktrace\n\n(defmethod parse-stacktrace :rhino\n  [repl-env st err {:keys [output-dir] :as opts}]\n  (letfn [(process-frame [frame-str]\n            (when-not (or (string/blank? frame-str)\n                          (== -1 (.indexOf frame-str \"\\tat\")))\n              (let [[file-side line-fn-side] (string/split frame-str #\":\")\n                   file                      (string/replace file-side #\"\\s+at\\s+\" \"\")\n                   [line function]           (string/split line-fn-side #\"\\s+\")]\n               {:file     (string/replace file\n                            (str output-dir\n                              #?(:clj File/separator :cljs \"/\"))\n                            \"\")\n                :function (when function\n                            (-> function\n                              (string/replace \"(\" \"\")\n                              (string/replace \")\" \"\")))\n                :line     (when (and line (not (string/blank? line)))\n                            (parse-int line))\n                :column   0})))]\n    (->> (string/split st #\"\\n\")\n      (map process-frame)\n      (remove nil?)\n      vec)))\n\n(comment\n  (parse-stacktrace {}\n    \"\\tat .cljs_rhino_repl/goog/../cljs/core.js:4215 (seq)\n     \\tat .cljs_rhino_repl/goog/../cljs/core.js:4245 (first)\n     \\tat .cljs_rhino_repl/goog/../cljs/core.js:5295 (ffirst)\n     \\tat <cljs repl>:1\n     \\tat <cljs repl>:1\"\n    {:ua-product :rhino}\n    {:output-dir \".cljs_rhino_repl\"})\n\n  (parse-stacktrace {}\n    \"org.mozilla.javascript.JavaScriptException: Error: 1 is not ISeqable (.cljs_rhino_repl/goog/../cljs/core.js#3998)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:3998 (cljs$core$seq)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:4017 (cljs$core$first)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:5160 (cljs$core$ffirst)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:16005\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:16004\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:10243\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:10334\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:3979 (cljs$core$seq)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28083 (cljs$core$pr_sequential_writer)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28811\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28267 (cljs$core$pr_writer_impl)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28349 (cljs$core$pr_writer)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28353 (cljs$core$pr_seq_writer)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28416 (cljs$core$pr_sb_with_opts)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28430 (cljs$core$pr_str_with_opts)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28524\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28520 (cljs$core$pr_str)\n   at <cljs repl>:1\n   \"\n    {:ua-product :rhino}\n    {:output-dir \".cljs_rhino_repl\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Nashorn Stacktrace\n\n(defmethod parse-stacktrace :nashorn\n  [repl-env st err {:keys [output-dir] :as opts}]\n  (letfn [(process-frame [frame-str]\n            (when-not (or (string/blank? frame-str)\n                          (== -1 (.indexOf frame-str \"\\tat\")))\n              (let [frame-str               (string/replace frame-str #\"\\s+at\\s+\" \"\")\n                    [function file-and-line] (string/split frame-str #\"\\s+\")\n                    [file-part line-part]    (string/split file-and-line #\":\")]\n                {:file     (string/replace (.substring file-part 1)\n                             (str output-dir\n                               #?(:clj File/separator :cljs \"/\"))\n                             \"\")\n                 :function function\n                 :line     (when (and line-part (not (string/blank? line-part)))\n                             (parse-int\n                               (.substring line-part 0\n                                 (dec (count line-part)))))\n                 :column   0})))]\n    (->> (string/split st #\"\\n\")\n      (map process-frame)\n      (remove nil?)\n      vec)))\n\n(comment\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    \\tat cljs$core$seq (.cljs_nashorn_repl/goog/../cljs/core.js:3998)\n    \\tat cljs$core$first (.cljs_nashorn_repl/goog/../cljs/core.js:4017)\n    \\tat cljs$core$ffirst (.cljs_nashorn_repl/goog/../cljs/core.js:5160)\n    \\tat <anonymous> (.cljs_nashorn_repl/goog/../cljs/core.js:16005)\n    \\tat <anonymous> (.cljs_nashorn_repl/goog/../cljs/core.js:16004)\n    \\tat sval (.cljs_nashorn_repl/goog/../cljs/core.js:10243)\n    \\tat cljs$core$ISeqable$_seq$arity$1-6 (.cljs_nashorn_repl/goog/../cljs/core.js:10334)\n    \\tat cljs$core$seq (.cljs_nashorn_repl/goog/../cljs/core.js:3979)\n    \\tat cljs$core$pr_sequential_writer (.cljs_nashorn_repl/goog/../cljs/core.js:28083)\n    \\tat cljs$core$IPrintWithWriter$_pr_writer$arity$3-5 (.cljs_nashorn_repl/goog/../cljs/core.js:28811)\n    \\tat cljs$core$pr_writer_impl (.cljs_nashorn_repl/goog/../cljs/core.js:28267)\n    \\tat cljs$core$pr_writer (.cljs_nashorn_repl/goog/../cljs/core.js:28349)\n    \\tat cljs$core$pr_seq_writer (.cljs_nashorn_repl/goog/../cljs/core.js:28353)\n    \\tat cljs$core$pr_sb_with_opts (.cljs_nashorn_repl/goog/../cljs/core.js:28416)\n    \\tat cljs$core$pr_str_with_opts (.cljs_nashorn_repl/goog/../cljs/core.js:28430)\n    \\tat cljs$core$IFn$_invoke$arity$variadic-71 (.cljs_nashorn_repl/goog/../cljs/core.js:28524)\n    \\tat cljs$core$pr_str (.cljs_nashorn_repl/goog/../cljs/core.js:28520)\n    \\tat <anonymous> (<eval>:1)\n    \\tat <program> (<eval>:1)\\n\"\n    {:ua-product :nashorn}\n    {:output-dir \".cljs_nashorn_repl\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Node.js Stacktrace\n\n(defmethod parse-stacktrace :nodejs\n  [repl-env st err {:keys [output-dir] :as opts}]\n  (letfn [(parse-source-loc-info [x]\n            (when (and x (not (string/blank? x)))\n              (parse-int x)))\n          (process-frame [frame-str]\n            (when-not (or (string/blank? frame-str)\n                          (nil? (re-find #\"^\\s+at\" frame-str)))\n              (let [frame-str (string/replace frame-str #\"\\s+at\\s+\" \"\")]\n                (when-not (string/starts-with? frame-str \"repl:\")\n                  (let [parts (string/split frame-str #\"\\s+\")\n                        [function file&line] (if (== 2 (count parts))\n                                                   [(first parts)\n                                                    (subs (second parts) 1\n                                                      (dec (count (second parts))))]\n                                                   [nil (first parts)])\n                        [file-part line-part col-part] (string/split file&line #\":\")]\n                    {:file     (if function\n                                 (cond-> file-part\n                                   output-dir\n                                   (string/replace\n                                     (str output-dir\n                                       #?(:clj File/separator :cljs \"/\"))\n                                     \"\"))\n                                 file-part)\n                     :function function\n                     :line     (parse-source-loc-info line-part)\n                     :column   (parse-source-loc-info col-part)})))))]\n    (->> (string/split st #\"\\n\")\n      (map process-frame)\n      (remove nil?)\n      vec)))\n\n(comment\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    at cljs$core$seq (.cljs_node_repl/cljs/core.cljs:1118:20)\n    at repl:1:65\n    at repl:9:4\n    at repl:17:3\n    at repl:22:4\n    at Object.exports.runInThisContext (vm.js:54:17)\n    at Domain.<anonymous> ([stdin]:41:34)\n    at Domain.run (domain.js:228:14)\n    at Socket.<anonymous> ([stdin]:40:25)\n    at emitOne (events.js:77:13)\"\n\n    {:ua-product :nodejs}\n    {:output-dir \".cljs_node_repl\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Stacktrace Mapping\n\n(defn remove-ext [file]\n  (-> file\n    (string/replace #\"\\.js$\" \"\")\n    (string/replace #\"\\.cljs$\" \"\")\n    (string/replace #\"\\.cljc$\" \"\")\n    (string/replace #\"\\.clj$\" \"\")))\n\n(defn mapped-line-column-call\n  \"Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called.\"\n  [sms file line column]\n  (let [source-map (get sms (symbol (string/replace (remove-ext file) \"/\" \".\")))]\n    ;; source maps are 0 indexed for columns\n    ;; multiple segments may exist at column\n    ;; the last segment seems most accurate\n    (letfn [(get-best-column [columns column]\n             (last (or (get columns\n                         (last (filter #(<= % (dec column))\n                                 (sort (keys columns)))))\n                     (second (first columns)))))\n           (adjust [mapped]\n             (vec (map #(%1 %2) [inc inc identity] mapped)))]\n     (let [default [line column nil]]\n       ;; source maps are 0 indexed for lines\n       (if-let [columns (get source-map (dec line))]\n         (adjust (map (get-best-column columns column) [:line :col :name]))\n         default)))))\n\n(defn mapped-frame\n  \"Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame.\"\n  [{:keys [function file line column]} sms opts]\n  (let [no-source-file?      (if-not file true (starts-with? file \"<\"))\n        [line' column' call] (if no-source-file?\n                               [line column nil]\n                               (mapped-line-column-call sms file line column))\n        file'                (when-not no-source-file?\n                               (if (ends-with? file \".js\")\n                                 (str (subs file 0 (- (count file) 3)) \".cljs\")\n                                 file))]\n    {:function function\n     :call     call\n     :file     (if no-source-file?\n                 (str \"NO_SOURCE_FILE\" (when file (str \" \" file)))\n                 file')\n     :line     line'\n     :column   column'}))\n\n(defn mapped-stacktrace\n  \"Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath.\"\n  ([stacktrace sms]\n   (mapped-stacktrace stacktrace sms nil))\n  ([stacktrace sms opts]\n   (letfn [(call->function [x]\n             (if (:call x)\n               (hash-map :function (:call x))\n               {}))\n           (call-merge [function call]\n             (merge-with\n               (fn [munged-fn-name unmunged-call-name]\n                 (if (= munged-fn-name\n                        (string/replace (munge unmunged-call-name) \".\" \"$\"))\n                   unmunged-call-name\n                   munged-fn-name))\n               function call))]\n     (let [mapped-frames (map (memoize #(mapped-frame % sms opts)) stacktrace)]\n       ;; take each non-nil :call and optionally merge it into :function one-level\n       ;; up to avoid replacing with local symbols, we only replace munged name if\n       ;; we can munge call symbol back to it\n       (vec (map call-merge\n              (map #(dissoc % :call) mapped-frames)\n              (concat (rest (map call->function mapped-frames)) [{}])))))))\n\n(defn mapped-stacktrace-str\n  \"Given a vector representing the canonicalized JavaScript stacktrace and a map\n  of library names to decoded source maps, print the ClojureScript stacktrace .\n  See mapped-stacktrace.\"\n  ([stacktrace sms]\n   (mapped-stacktrace-str stacktrace sms nil))\n  ([stacktrace sms opts]\n   (with-out-str\n     (doseq [{:keys [function file line column]}\n             (mapped-stacktrace stacktrace sms opts)]\n       (println \"\\t\"\n         (str (when function (str function \" \"))\n              \"(\" file (when line (str \":\" line))\n                       (when column (str \":\" column)) \")\"))))))\n\n(comment\n  (require '[cljs.closure :as cljsc]\n           '[clojure.data.json :as json]\n           '[cljs.source-map :as sm]\n           '[clojure.pprint :as pp])\n\n  (cljsc/build \"samples/hello/src\"\n    {:optimizations :none\n     :output-dir \"samples/hello/out\"\n     :output-to \"samples/hello/out/hello.js\"\n     :source-map true})\n\n  (def sms\n    {'hello.core\n     (sm/decode\n       (json/read-str\n         (slurp \"samples/hello/out/hello/core.js.map\")\n         :key-fn keyword))})\n\n  (pp/pprint sms)\n\n  ;; maps to :line 5 :column 24\n  (mapped-stacktrace\n    [{:file \"hello/core.js\"\n      :function \"first\"\n      :line 6\n      :column 0}]\n    sms {:output-dir \"samples/hello/out\"})\n\n  (mapped-stacktrace-str\n    [{:file \"hello/core.js\"\n      :function \"first\"\n      :line 6\n      :column 0}]\n    sms {:output-dir \"samples/hello/out\"})\n  )\n"]}