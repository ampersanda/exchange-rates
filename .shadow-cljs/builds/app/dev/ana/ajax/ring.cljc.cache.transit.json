["^ ","~:output",["^ ","~:js","goog.provide('ajax.ring');\ngoog.require('cljs.core');\ngoog.require('ajax.interceptors');\ngoog.require('ajax.protocols');\ngoog.require('ajax.formats');\najax.ring.make_ring_read = (function ajax$ring$make_ring_read(body_read){\nreturn (function ajax$ring$make_ring_read_$_ring_read(response){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),ajax.protocols._status(response),new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),ajax.protocols._get_all_headers(response),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),(body_read.cljs$core$IFn$_invoke$arity$1 ? body_read.cljs$core$IFn$_invoke$arity$1(response) : body_read.call(null,response))], null);\n});\n});\n/**\n * Returns a Ring-compatible response map.\n * \n * Optionally can be passed a :format option. This should be another\n * response-format map. If format is provided it will be used to\n * specify the content-type, and the read method will be used to\n * populate the :body key in the response map.\n */\najax.ring.ring_response_format = (function ajax$ring$ring_response_format(var_args){\nvar G__11974 = arguments.length;\nswitch (G__11974) {\ncase 0:\nreturn ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\najax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),ajax.formats.raw_response_format.cljs$core$IFn$_invoke$arity$0()], null));\n});\n\najax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1 = (function (p__11976){\nvar map__11977 = p__11976;\nvar map__11977__$1 = ((((!((map__11977 == null)))?(((((map__11977.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__11977.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__11977):map__11977);\nvar map__11978 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11977__$1,new cljs.core.Keyword(null,\"format\",\"format\",-1306924766));\nvar map__11978__$1 = ((((!((map__11978 == null)))?(((((map__11978.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__11978.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__11978):map__11978);\nvar read = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11978__$1,new cljs.core.Keyword(null,\"read\",\"read\",1140058661));\nvar description = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11978__$1,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544));\nvar content_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11978__$1,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634));\nreturn ajax.interceptors.map__GT_ResponseFormat(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"read\",\"read\",1140058661),ajax.ring.make_ring_read(read),new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),[\"ring/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(description)].join(''),new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),content_type], null));\n});\n\najax.ring.ring_response_format.cljs$lang$maxFixedArity = 1;\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","ajax/ring.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",14],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$ajax.ring","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ajax.interceptors","^K","~$ajax.protocols","^L","~$ajax.formats","^M","~$f","^M","~$cljs.core","^N","~$goog","^O"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$map->ResponseFormat","^K","~$-status","^L","~$-get-all-headers","^L","~$-body","^L"],"~:require-macros",["^ ","^N","^N"],"~:form",["~#list",["~$ns","^F",["^Y",["^Q",["^K","~:refer",["^S"]],["^L","^[",["^T","^U","^V"]],["^M","~:as","~$f"]]]]],"~:flags",["^ ","^Q",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^O","^N","^K","^L","^M"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","ajax/ring.cljc"],"~:compiled-at",1538663263489,"~:resource-name","ajax/ring.cljc","~:warnings",[],"~:source","(ns ajax.ring\n  (:require [ajax.interceptors :refer [map->ResponseFormat]]\n            [ajax.protocols :refer [-status -get-all-headers -body]]\n            [ajax.formats :as f]))\n\n(defn make-ring-read [body-read]\n  (fn ring-read [response]\n    {:status (-status response)\n     :headers (-get-all-headers response)\n     :body (body-read response)}))\n\n(defn ring-response-format\n  \"Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map.\"\n  ([] (ring-response-format {:format (f/raw-response-format)}))\n  ([{{:keys [read description content-type]} :format}]\n   (map->ResponseFormat {:read (make-ring-read read)\n                         :description (str \"ring/\" description)\n                         :content-type content-type})))\n","~:reader-features",["^D",["~:cljs"]],"~:source-map",["^ ","~i5",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",5],["^ ","^1=",27,"^1>",5],["^ ","^1=",0,"^1>",6]],"~i6",[["^ ","^1=",0,"^1>",5,"^E","ajax.ring/make-ring-read"]],"~i22",[["^ ","^1=",62,"^1>",5,"^E","body-read"]]],"~i6",["^ ","~i2",[["^ ","^1=",0,"^1>",6],["^ ","^1=",0,"^1>",7],["^ ","^1=",0,"^1>",7],["^ ","^1=",50,"^1>",7],["^ ","^1=",141,"^1>",7],["^ ","^1=",242,"^1>",7]],"~i17",[["^ ","^1=",54,"^1>",6,"^E","response"]]],"~i7",["^ ","~i13",[["^ ","^1=",108,"^1>",7]],"~i14",[["^ ","^1=",108,"^1>",7,"^E","ajax.protocols/-status"]],"^1?",[["^ ","^1=",131,"^1>",7,"^E","response"]]],"~i8",["^ ","^1B",[["^ ","^1=",200,"^1>",7]],"~i15",[["^ ","^1=",200,"^1>",7,"^E","ajax.protocols/-get-all-headers"]],"~i32",[["^ ","^1=",232,"^1>",7,"^E","response"]]],"~i9",["^ ","~i11",[["^ ","^1=",296,"^1>",7]],"~i12",[["^ ","^1=",297,"^1>",7,"^E","body-read"],["^ ","^1=",339,"^1>",7,"^E","body-read"],["^ ","^1=",391,"^1>",7,"^E","body-read"]],"^1?",[["^ ","^1=",379,"^1>",7,"^E","response"],["^ ","^1=",411,"^1>",7,"^E","response"]]],"^1E",["^ ","~i0",[["^ ","^1=",0,"^1>",10],["^ ","^1=",0,"^1>",10],["^ ","^1=",33,"^1>",18],["^ ","^1=",74,"^1>",18,"^E","var_args"],["^ ","^1=",0,"^1>",19],["^ ","^1=",0,"^1>",19],["^ ","^1=",4,"^1>",19,"^E","G__11974"],["^ ","^1=",15,"^1>",19],["^ ","^1=",15,"^1>",19],["^ ","^1=",0,"^1>",20],["^ ","^1=",0,"^1>",20],["^ ","^1=",8,"^1>",20,"^E","G__11974"],["^ ","^1=",5,"^1>",21],["^ ","^1=",0,"^1>",22],["^ ","^1=",7,"^1>",22,"^E","ajax.ring/ring-response-format"],["^ ","^1=",5,"^1>",25],["^ ","^1=",0,"^1>",26],["^ ","^1=",7,"^1>",26,"^E","ajax.ring/ring-response-format"],["^ ","^1=",68,"^1>",26],["^ ","^1=",69,"^1>",26],["^ ","^1=",79,"^1>",26],["^ ","^1=",0,"^1>",30],["^ ","^1=",6,"^1>",30],["^ ","^1=",11,"^1>",30,"^E","js/Error"],["^ ","^1=",17,"^1>",30],["^ ","^1=",18,"^1>",30],["^ ","^1=",80,"^1>",30],["^ ","^1=",80,"^1>",30],["^ ","^1=",0,"^1>",35],["^ ","^1=",0,"^1>",35],["^ ","^1=",63,"^1>",35],["^ ","^1=",0,"^1>",36],["^ ","^1=",0,"^1>",39],["^ ","^1=",0,"^1>",39],["^ ","^1=",63,"^1>",39],["^ ","^1=",74,"^1>",39,"^E","p__11976"],["^ ","^1=",0,"^1>",40],["^ ","^1=",0,"^1>",40],["^ ","^1=",4,"^1>",40,"^E","map__11977"],["^ ","^1=",17,"^1>",40,"^E","p__11976"],["^ ","^1=",4,"^1>",41,"^E","map__11977"],["^ ","^1=",21,"^1>",41],["^ ","^1=",23,"^1>",41],["^ ","^1=",25,"^1>",41],["^ ","^1=",27,"^1>",41],["^ ","^1=",28,"^1>",41,"^E","map__11977"],["^ ","^1=",42,"^1>",41],["^ ","^1=",50,"^1>",41],["^ ","^1=",52,"^1>",41],["^ ","^1=",54,"^1>",41],["^ ","^1=",55,"^1>",41],["^ ","^1=",55,"^1>",41,"^E","map__11977"],["^ ","^1=",104,"^1>",41],["^ ","^1=",115,"^1>",41],["^ ","^1=",116,"^1>",41,"^E","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1=",148,"^1>",41],["^ ","^1=",148,"^1>",41,"^E","map__11977"],["^ ","^1=",179,"^1>",41],["^ ","^1=",184,"^1>",41],["^ ","^1=",191,"^1>",41],["^ ","^1=",199,"^1>",41],["^ ","^1=",199,"^1>",41,"^E","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1=",245,"^1>",41,"^E","cljs.core/hash-map"],["^ ","^1=",264,"^1>",41,"^E","map__11977"],["^ ","^1=",276,"^1>",41,"^E","map__11977"],["^ ","^1=",4,"^1>",42,"^E","map__11978"],["^ ","^1=",17,"^1>",42],["^ ","^1=",17,"^1>",42,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1=",61,"^1>",42,"^E","map__11977"],["^ ","^1=",76,"^1>",42],["^ ","^1=",4,"^1>",43,"^E","map__11978"],["^ ","^1=",21,"^1>",43],["^ ","^1=",23,"^1>",43],["^ ","^1=",25,"^1>",43],["^ ","^1=",27,"^1>",43],["^ ","^1=",28,"^1>",43,"^E","map__11978"],["^ ","^1=",42,"^1>",43],["^ ","^1=",50,"^1>",43],["^ ","^1=",52,"^1>",43],["^ ","^1=",54,"^1>",43],["^ ","^1=",55,"^1>",43],["^ ","^1=",55,"^1>",43,"^E","map__11978"],["^ ","^1=",104,"^1>",43],["^ ","^1=",115,"^1>",43],["^ ","^1=",116,"^1>",43,"^E","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1=",148,"^1>",43],["^ ","^1=",148,"^1>",43,"^E","map__11978"],["^ ","^1=",179,"^1>",43],["^ ","^1=",184,"^1>",43],["^ ","^1=",191,"^1>",43],["^ ","^1=",199,"^1>",43],["^ ","^1=",199,"^1>",43,"^E","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1=",245,"^1>",43,"^E","cljs.core/hash-map"],["^ ","^1=",264,"^1>",43,"^E","map__11978"],["^ ","^1=",276,"^1>",43,"^E","map__11978"],["^ ","^1=",11,"^1>",44],["^ ","^1=",11,"^1>",44,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1=",55,"^1>",44,"^E","map__11978"],["^ ","^1=",70,"^1>",44],["^ ","^1=",18,"^1>",45],["^ ","^1=",18,"^1>",45,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1=",62,"^1>",45,"^E","map__11978"],["^ ","^1=",77,"^1>",45],["^ ","^1=",19,"^1>",46],["^ ","^1=",19,"^1>",46,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1=",63,"^1>",46,"^E","map__11978"],["^ ","^1=",78,"^1>",46],["^ ","^1=",0,"^1>",47],["^ ","^1=",0,"^1>",50],["^ ","^1=",0,"^1>",50],["^ ","^1=",57,"^1>",50],["^ ","^1=",0,"^1>",52]],"~i6",[["^ ","^1=",0,"^1>",18,"^E","ajax.ring/ring-response-format"],["^ ","^1=",0,"^1>",35,"^E","ajax.ring/ring-response-format"],["^ ","^1=",0,"^1>",39,"^E","ajax.ring/ring-response-format"],["^ ","^1=",0,"^1>",50,"^E","ajax.ring/ring-response-format"]]],"~i18",["^ ","~i6",[["^ ","^1=",0,"^1>",36],["^ ","^1=",68,"^1>",36],["^ ","^1=",111,"^1>",36]],"~i7",[["^ ","^1=",7,"^1>",36,"^E","ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1"]],"~i37",[["^ ","^1=",169,"^1>",36]],"~i38",[["^ ","^1=",169,"^1>",36,"^E","ajax.formats.raw_response_format.cljs$core$IFn$_invoke$arity$0"]]],"~i19",["^ ","^1A",[["^ ","^1=",4,"^1>",44,"^E","read"]],"^1G",[["^ ","^1=",4,"^1>",45,"^E","description"]],"~i30",[["^ ","^1=",4,"^1>",46,"^E","content-type"]]],"~i20",["^ ","~i3",[["^ ","^1=",0,"^1>",47],["^ ","^1=",48,"^1>",47],["^ ","^1=",91,"^1>",47],["^ ","^1=",175,"^1>",47],["^ ","^1=",319,"^1>",47]],"~i4",[["^ ","^1=",7,"^1>",47,"^E","ajax.interceptors/map->ResponseFormat"]],"~i31",[["^ ","^1=",144,"^1>",47]],"^1D",[["^ ","^1=",144,"^1>",47,"^E","ajax.ring/make-ring-read"]],"~i47",[["^ ","^1=",169,"^1>",47,"^E","read"]]],"~i21",["^ ","^1I",[["^ ","^1=",243,"^1>",47],["^ ","^1=",244,"^1>",47]],"~i51",[["^ ","^1=",296,"^1>",47,"^E","description"]]],"^1?",["^ ","~i39",[["^ ","^1=",388,"^1>",47,"^E","content-type"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:macro","^N"],[1533531173000],["^15","goog/math/math.js"],[1533039457000,"^O","~$goog.array","~$goog.asserts"],["^15","goog/array/array.js"],[1533039457000,"^O","^1W"],["^15","goog/debug/error.js"],[1533039457000,"^O"],["^15","ajax/interceptors.cljc"],[1533682384000,"^O","^N","~$clojure.string","~$ajax.util","~$ajax.url","^L"],["^15","goog/dom/nodetype.js"],[1533039457000,"^O"],["^15","ajax/protocols.cljc"],[1533682384000,"^O","^N"],["^15","ajax/url.cljc"],[1533682384000,"^O","^N","^1X","^1Y"],["^15","goog/object/object.js"],[1533039457000,"^O"],"~:SHADOW-TIMESTAMP",[1538013766000,1533531173000],["^15","goog/math/long.js"],[1533039457000,"^O","^1W","~$goog.reflect"],["^15","goog/functions/functions.js"],[1533039457000,"^O"],["^15","goog/structs/map.js"],[1533039457000,"^O","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^15","ajax/util.cljc"],[1533682384000,"^O","^N","^L"],["^15","ajax/ring.cljc"],[1533682384000,"^O","^N","^K","^L","^M"],["^15","goog/asserts/asserts.js"],[1533039457000,"^O","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^15","goog/uri/uri.js"],[1533039457000,"^O","^1V","^1W","^26","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^15","goog/base.js"],[1533039457000],["^15","goog/structs/structs.js"],[1533039457000,"^O","^1V","^23"],["^1U","~$ajax.macros"],[1533682384000],["^15","clojure/string.cljs"],[1533531173000,"^O","^N","^26","~$goog.string.StringBuffer"],["^15","goog/string/string.js"],[1533039457000,"^O"],["^15","ajax/formats.cljc"],[1533682384000,"^O","^N","^K","^1Y","^L"],["^15","goog/reflect/reflect.js"],[1533039457000,"^O"],["^15","goog/string/stringbuffer.js"],[1533039457000,"^O"],["^15","goog/iter/iter.js"],[1533039457000,"^O","^1V","^1W","~$goog.functions","~$goog.math"],["^15","cljs/core.cljs"],[1533531173000,"~$goog.math.Long","~$goog.math.Integer","^26","^23","^1V","~$goog.Uri","^2="],["^1U","~$poppea"],[1533682384000],["^15","goog/math/integer.js"],[1533039457000,"^O"],["^15","goog/uri/utils.js"],[1533039457000,"^O","^1V","^1W","^26"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","ajax/ring.cljc","^7",1,"^8",5,"^9",1,"^:",14],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L","^M","^M","~$f","^M","^N","^N","^O","^O"],"^P",["^D",["^Q"]],"~:shadow/js-access-global",["^D",["Error"]],"^R",["^ ","^S","^K","^T","^L","^U","^L","^V","^L"],"~:defs",["^ ","~$make-ring-read",["^ ","~:protocol-inline",null,"^5",["^ ","^6","ajax/ring.cljc","^7",6,"^8",7,"^9",6,"^:",21,"~:arglists",["^Y",["~$quote",["^Y",[["~$body-read"]]]]]],"^E","~$ajax.ring/make-ring-read","~:variadic",false,"^6","ajax/ring.cljc","^:",21,"~:method-params",["^Y",[["^2K"]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^8",1,"^7",6,"^9",6,"~:max-fixed-arity",1,"~:fn-var",true,"^2I",["^Y",["^2J",["^Y",[["^2K"]]]]]],"~$ring-response-format",["^ ","^2H",null,"^5",["^ ","^6","ajax/ring.cljc","^7",12,"^8",7,"^9",12,"^:",27,"^2I",["^Y",["^2J",["^Y",[[],[["^1T",[["^ ","~:keys",["~$read","~$description","~$content-type"]],"~:format"]]]]]]],"~:doc","Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map.","~:top-fn",["^ ","^2M",false,"^2Q",1,"^2N",["^Y",[[],[["^1T",[["^ ","^2T",["^2U","^2V","^2W"]],"^2X"]]]]],"^2I",["^Y",[[],[["^1T",[["^ ","^2T",["^2U","^2V","^2W"]],"^2X"]]]]],"^2P",["^Y",[null,null]]]],"^E","~$ajax.ring/ring-response-format","^2M",false,"^6","ajax/ring.cljc","^:",27,"^2Z",["^ ","^2M",false,"^2Q",1,"^2N",["^Y",[[],[["^1T",[["^ ","^2T",["^2U","^2V","^2W"]],"^2X"]]]]],"^2I",["^Y",[[],[["^1T",[["^ ","^2T",["^2U","^2V","^2W"]],"^2X"]]]]],"^2P",["^Y",[null,null]]],"^2N",["^Y",[[],[["^1T",[["^ ","^2T",["^2U","^2V","^2W"]],"^2X"]]]]],"^2O",null,"^2P",["^Y",[null,null]],"^8",1,"^7",12,"^9",12,"^2Q",1,"^2R",true,"^2I",["^Y",[[],[["^1T",[["^ ","^2T",["^2U","^2V","^2W"]],"^2X"]]]]],"^2Y","Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map."]],"^W",["^ ","^N","^N"],"~:cljs.analyzer/constants",["^ ","^P",["^D",["~:description","^2X","~:read","~:headers","~:status","~:content-type","~:body"]],"~:order",["^34","^33","^36","^2X","^32","^31","^35"]],"^11",["^ ","^Q",["^D",[]]],"^12",["^ "],"^13",["^O","^N","^K","^L","^M"]],"^H","^F","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1T",[["^3:","~:static-fns"],true,["^3:","~:elide-asserts"],false,["^3:","~:optimize-constants"],null,["^3:","~:external-config"],null,["^3:","~:tooling-config"],null,["^3:","~:emit-constants"],null,["^3:","~:infer-externs"],true,["^3:","^1:"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3:","~:fn-invoke-direct"],null,["^3:","^1<"],"/dev/null"]]]